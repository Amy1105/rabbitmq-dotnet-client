#nullable enable
RabbitMQ.Client.OAuth2.IOAuth2Client
RabbitMQ.Client.OAuth2.IToken
RabbitMQ.Client.OAuth2.IToken.AccessToken.get -> string
RabbitMQ.Client.OAuth2.IToken.ExpiresIn.get -> System.TimeSpan
RabbitMQ.Client.OAuth2.IToken.HasExpired.get -> bool
RabbitMQ.Client.OAuth2.IToken.RefreshToken.get -> string
RabbitMQ.Client.OAuth2.OAuth2ClientBuilder
RabbitMQ.Client.OAuth2.OAuth2ClientBuilder.AddRequestParameter(string param, string paramValue) -> RabbitMQ.Client.OAuth2.OAuth2ClientBuilder
RabbitMQ.Client.OAuth2.OAuth2ClientBuilder.OAuth2ClientBuilder(string! clientId, string! clientSecret, System.Uri? tokenEndpoint = null, System.Uri? issuer = null) -> void
RabbitMQ.Client.OAuth2.OAuth2ClientBuilder.SetScope(string scope) -> RabbitMQ.Client.OAuth2.OAuth2ClientBuilder
RabbitMQ.Client.OAuth2.OAuth2ClientCredentialsProvider
RabbitMQ.Client.OAuth2.OAuth2ClientCredentialsProvider.Name.get -> string
RabbitMQ.Client.OAuth2.OAuth2ClientCredentialsProvider.OAuth2ClientCredentialsProvider(string name, RabbitMQ.Client.OAuth2.IOAuth2Client oAuth2Client) -> void
RabbitMQ.Client.OAuth2.Token
RabbitMQ.Client.OAuth2.Token.AccessToken.get -> string
RabbitMQ.Client.OAuth2.Token.ExpiresIn.get -> System.TimeSpan
RabbitMQ.Client.OAuth2.Token.RefreshToken.get -> string
RabbitMQ.Client.OAuth2.CredentialsRefresher
RabbitMQ.Client.OAuth2.CredentialsRefresher.Credentials.get -> RabbitMQ.Client.Credentials?
RabbitMQ.Client.OAuth2.CredentialsRefresher.CredentialsRefresher(RabbitMQ.Client.ICredentialsProvider! credentialsProvider, RabbitMQ.Client.OAuth2.NotifyCredentialsRefreshedAsync! onRefreshed, System.Threading.CancellationToken cancellationToken) -> void
RabbitMQ.Client.OAuth2.CredentialsRefresher.Dispose() -> void
RabbitMQ.Client.OAuth2.CredentialsRefresherEventSource
RabbitMQ.Client.OAuth2.CredentialsRefresherEventSource.CredentialsRefresherEventSource() -> void
RabbitMQ.Client.OAuth2.CredentialsRefresherEventSource.RefreshedCredentials(string! name) -> void
RabbitMQ.Client.OAuth2.CredentialsRefresherEventSource.Started(string! name) -> void
RabbitMQ.Client.OAuth2.CredentialsRefresherEventSource.Stopped(string! name) -> void
RabbitMQ.Client.OAuth2.IOAuth2Client.RefreshTokenAsync(RabbitMQ.Client.OAuth2.IToken! token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.Client.OAuth2.IToken!>!
RabbitMQ.Client.OAuth2.IOAuth2Client.RequestTokenAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.Client.OAuth2.IToken!>!
RabbitMQ.Client.OAuth2.NotifyCredentialsRefreshedAsync
RabbitMQ.Client.OAuth2.OAuth2ClientBuilder.BuildAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.ValueTask<RabbitMQ.Client.OAuth2.IOAuth2Client!>
RabbitMQ.Client.OAuth2.OAuth2ClientBuilder.SetHttpClientHandler(System.Net.Http.HttpClientHandler! handler) -> RabbitMQ.Client.OAuth2.OAuth2ClientBuilder!
RabbitMQ.Client.OAuth2.OAuth2ClientCredentialsProvider.Dispose() -> void
RabbitMQ.Client.OAuth2.OAuth2ClientCredentialsProvider.GetCredentialsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<RabbitMQ.Client.Credentials!>!
static RabbitMQ.Client.OAuth2.CredentialsRefresherEventSource.Log.get -> RabbitMQ.Client.OAuth2.CredentialsRefresherEventSource!
virtual RabbitMQ.Client.OAuth2.CredentialsRefresher.Dispose(bool disposing) -> void
